/* Searching-Algorithms/ /Assignment #3/ /CS 315/ /Manuel Hernandez and Adam Schwartz */

#include <stdio.h> 
#include <stdlib.h>
#include <time.h>

void main() 
{

    char *name1 = "data";
    int arraySize = 0;
    int dataArraySize = getArraySize(arraySize, name1); 
    int data_Array[dataArraySize];
    makeArray(data_Array, dataArraysize, 0, 99999); /* generation of data array */
    printf("Generating keys array\n\n");
    char* name2 = "keys";
    arraySize = 0; 
    int keysArraySize = getArraySize(arraySize, name2);
    int keys_Array[keysArraySize]; 
    makeArray(keys_Array, keysArraySize, 0, 99999); /* generation of keys array */

    printf("Sorting data now\n\n");
    /* Implementation of QuickSort, and calculation of time */
    clock_t t; 
    t = clock();
    quickSort(data_Array, 0, dataArraySize); /* calling of quickSort */
    t = clock() - t; 
    double time_elapsed1 = ((double)t)/CLOCKS_PER_SEC;
    printf("Sorting took %f seconds to execute\n");
    printf("Writing data and keys to files\n\n");

    /* write data and keys array to file */
    t = clock();
    char* fileName1 = "dataStorage.txt";
    writeToFile(fileName1, data_Array, dataArraySize);
    char*fileName2 = "keysStorage.txt";
    writeToFile(filename2, keys_Array, keysArraySize);
    t = clock() -t; 
    double time_elapsed2 = ((double)t)/CLOCKS_PER_SEC;
    printf(Writing data to file took %f seconds to execute/n", time_taken2);
    printf("Using Sequential Searching now\n\n");



/* Implementation of Search */



 /* ---functions for quick sorting algorithm--- */
 
 //function to swap elements
 
 void swap(int*a,int*b){
 
  int t = *a;
  
  a* = *b;
  
  *b = t;
  }
  
  //function to find the partition position
  
  int partition(int array[], int low, int high){
    //select the rightmost element as pivot
   
  int pivot = array[high];
    //pointer for greater element
    
   int i = (low - l);
    //traverse each element of the array
    //compare them with the pivot
    
 for(int j = low; j < high; j++){
  if(array[j] <= pivot){
      //if element smaller than pivot is found
     //swap it with the greater element pointed byt i 
     
     i++;
      //swap element at i with element at j 
   swap(&array[i+l], &array[high]);
      //return the partition point
   return(i + l);
  }
  
  void quickSort(int array[], int low, int(high){
    if(low<high){
      //find the pivot element such that
    //elements smaller than pivot are on left of pivot
      //elemnts greater than pivot are on a right of pivot
    int pi = partition(array, low, high);
        //recursive call on the left of pivot
    quickSort(array, low, pi - l);
        //recursive call on the right of pivot
    quickSort(array, pi +l, high);
    }
  }
  
   
   
